diff --git a/litex.mk b/litex.mk
index 05f04a2..10ec113 100644
--- a/litex.mk
+++ b/litex.mk
@@ -1,6 +1,9 @@
 ifdef CONFIG_CPU_MINERVA
 LITEX_CPU_DIR  := $(top)/3rdparty/litex/litex/soc/cores/cpu/minerva
 CPPFLAGS_litex := -D__minerva__
+else ifdef CONFIG_CPU_VEXRISCV
+LITEX_CPU_DIR  := $(top)/3rdparty/litex/litex/soc/cores/cpu/vexriscv
+CPPFLAGS_litex := -D__vexriscv__
 else
 $(error Unsupported CPU)
 endif
diff --git a/src/arch/Kconfig b/src/arch/Kconfig
index 06586bf..a6c0a92 100644
--- a/src/arch/Kconfig
+++ b/src/arch/Kconfig
@@ -10,17 +10,21 @@ config CPU_MINERVA
     bool "Minerva"
     select CPU_ARCH_RISCV
 
+config CPU_VEXRISCV
+    bool "Vexriscv"
+    select CPU_ARCH_RISCV
+
 endchoice
 
 config CPU_BYTEORDER_LITTLE
     bool
-	default "y" if CPU_MINERVA
+    default "y"
 
 config CPU_RESET_ADDR
     hex "Reset vector address"
 
 config CPU_DATA_WIDTH
     int
-	default 32 if CPU_MINERVA
+    default 32
 
 endmenu
diff --git a/src/arch/riscv/include/arch/irq.h b/src/arch/riscv/include/arch/irq.h
index cf9dc97..a18b362 100644
--- a/src/arch/riscv/include/arch/irq.h
+++ b/src/arch/riscv/include/arch/irq.h
@@ -20,7 +20,7 @@ static inline void irq_setie(uint32_t ie)
 }
 
 // TODO #include CPU-specific headers instead
-#ifdef CONFIG_CPU_MINERVA
+#if CONFIG_CPU_MINERVA
 static inline uint32_t irq_getmask(void)
 {
     return read_csr(0x330);
@@ -35,6 +35,21 @@ static inline uint32_t irq_pending(void)
 {
     return read_csr(0x360);
 }
+#elif CONFIG_CPU_VEXRISCV
+static inline uint32_t irq_getmask(void)
+{
+    return read_csr(0xBC0);
+}
+
+static inline void irq_setmask(uint32_t value)
+{
+    write_csr(0xBC0, value);
+}
+
+static inline uint32_t irq_pending(void)
+{
+    return read_csr(0xFC0);
+}
 #else
 #error Unknown CPU
 #endif
